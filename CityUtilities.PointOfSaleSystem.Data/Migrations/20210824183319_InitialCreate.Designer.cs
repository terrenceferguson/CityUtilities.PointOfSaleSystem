// <auto-generated />
using System;
using CityUtilities.PointOfSaleSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CityUtilities.PointOfSaleSystem.Data.Migrations
{
    [DbContext(typeof(PointOfSaleContext))]
    [Migration("20210824183319_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CityUtilities.PointOfSaleSystem.Core.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("StockNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CityUtilities.PointOfSaleSystem.Core.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("CityUtilities.PointOfSaleSystem.Core.StoreLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentAisle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StoreLocation");
                });

            modelBuilder.Entity("ProductSalesOrder", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrdersId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "SalesOrdersId");

                    b.HasIndex("SalesOrdersId");

                    b.ToTable("ProductSalesOrder");
                });

            modelBuilder.Entity("ProductStoreLocation", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreLocationsId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "StoreLocationsId");

                    b.HasIndex("StoreLocationsId");

                    b.ToTable("ProductStoreLocation");
                });

            modelBuilder.Entity("ProductSalesOrder", b =>
                {
                    b.HasOne("CityUtilities.PointOfSaleSystem.Core.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityUtilities.PointOfSaleSystem.Core.SalesOrder", null)
                        .WithMany()
                        .HasForeignKey("SalesOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductStoreLocation", b =>
                {
                    b.HasOne("CityUtilities.PointOfSaleSystem.Core.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityUtilities.PointOfSaleSystem.Core.StoreLocation", null)
                        .WithMany()
                        .HasForeignKey("StoreLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
